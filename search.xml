<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/21/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Datapath synthesis in Verilog</title>
    <url>/2021/02/21/verilog-datapath-md/</url>
    <content><![CDATA[<h6 id="锁存器的综合："><a href="#锁存器的综合：" class="headerlink" title="锁存器的综合："></a>锁存器的综合：</h6><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> latch <span class="token punctuation">(</span>
    <span class="token keyword">output</span> q_out<span class="token punctuation">,</span>
    <span class="token keyword">input</span> data_in<span class="token punctuation">,</span> enable<span class="token punctuation">,</span> rst_b
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assign</span> q_out <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>rst_b <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token punctuation">:</span>enable <span class="token operator">?</span> data_in<span class="token punctuation">:</span>q_out<span class="token punctuation">;</span>
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<span id="more"></span>

<ul>
<li>当一条带条件操作符的连续赋值语句出现反馈时，综合工具将判断出它具有一个锁存器的功能，并给出它的硬件实现。</li>
<li>在赋值表达式的右逻辑发生变化的所有情况下，必须给行为中包含的所有变量赋值，否则会产生不想要的锁存器。因此所有用以实现组合逻辑的电平敏感行为电路的输入信号都必须包含于事件控制表达式中</li>
<li>电平敏感周期型行为中，赋值语句的右表达式中任意信号都不再出现于其左表达式中 （如果想要生成组合逻辑电路）</li>
</ul>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">//有意综合锁存器，注意非阻塞赋值&lt;= 的运用</span>

<span class="token comment">// 综合成带反馈的多路复用器结构</span>
<span class="token keyword">module</span> latch_if1 <span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> data_out<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> data_in<span class="token punctuation">,</span> <span class="token keyword">input</span> latch_enable
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>latch_enable<span class="token punctuation">)</span> data_out <span class="token operator">&lt;=</span> data_in<span class="token punctuation">;</span> 
        <span class="token keyword">else</span> data_out <span class="token operator">&lt;=</span> data_out<span class="token punctuation">;</span> 
<span class="token keyword">endmodule</span>

<span class="token comment">// 综合成硬件锁存器</span>
<span class="token keyword">module</span> latch_if2 <span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> data_out<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> data_in<span class="token punctuation">,</span> <span class="token keyword">input</span> latch_enable
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>latch_enable<span class="token punctuation">)</span> data_out <span class="token operator">&lt;=</span> data_in<span class="token punctuation">;</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>In a level-sensitive cyclic behavior. If a case statement has a default assignment with feedback (i.e., the variable is explicitly assigned to itself), the synthesis tool will form a mux structure with feedback. </li>
<li>Likewise, if an if statement in a level-sensitive behavior assigns a variable to itself, the result will be a mux structure with feedback.</li>
<li>If the conditional operator is used in a continuous assignment, the result will be a mux with feedback. If it is used in a level-sensitive cyclic behavior, the result will be a hardware latch. </li>
<li>If the conditional operator is used in an edge-sensitive cyclic behavior, the result will be a register with a gated data path in a feedback configuration with the output of the register.</li>
</ul>
<h6 id="触发器的综合："><a href="#触发器的综合：" class="headerlink" title="触发器的综合："></a>触发器的综合：</h6><p>A register variable in an edge-sensitive behavior will be synthesized as a flip-flop</p>
<p>(1) A variable that is referenced within an edge-sensitive behavior before it is assigned value in the behavior will be synthesized as the output of a flip-flop.</p>
<p>(2) if it is referenced within the behavior before it is assigned value.</p>
<p>(3) if it is assigned value in only some of the branches of the activity within the behavior.</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// 异步复位D触发器</span>
<span class="token keyword">module</span> asynch_df_behav <span class="token punctuation">(</span>
	<span class="token keyword">input</span> data<span class="token punctuation">,</span> set_b<span class="token punctuation">,</span> rst_b<span class="token punctuation">,</span> clk<span class="token punctuation">,</span>
	<span class="token keyword">output</span> <span class="token keyword">reg</span> q<span class="token punctuation">,</span> outputq_bar
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">,</span> <span class="token keyword">negedge</span> set_b<span class="token punctuation">,</span> <span class="token keyword">negedge</span> rst_b<span class="token punctuation">)</span> <span class="token keyword">begin</span>
        <span class="token function">if</span><span class="token punctuation">(</span>rst_b <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>q <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>set_b <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>q <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> 
    	<span class="token keyword">else</span> q <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span> <span class="token comment">// synchronized activity </span>
    <span class="token keyword">end</span>
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>综合工具只支持全部为边缘敏感或全部为电平敏感的事件控制表达式</li>
<li>always中的语句块为顺序执行，并且反复无限的执行</li>
<li>Recall that an incomplete conditional statement (i.e., an if … else statement or a case statement) in a level-sensitive cyclic behavior will synthesize to a latch. However, if the behavior is edge-sensitive, these types of statements will not create latches, but they will synthesize logic that implements a “clock enable,” because the incompletestatements imply that the affected variables should not change under the conditions implied by the logic, even though the clock makes a transition.</li>
</ul>
<h6 id="比较器的综合-连续赋值与寄存器传输模型的比较-："><a href="#比较器的综合-连续赋值与寄存器传输模型的比较-：" class="headerlink" title="比较器的综合 (连续赋值与寄存器传输模型的比较)："></a>比较器的综合 (连续赋值与寄存器传输模型的比较)：</h6><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> compare_32_CA #<span class="token punctuation">(</span><span class="token keyword">parameter</span> word__size <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token keyword">output</span> A_gt_B<span class="token punctuation">,</span>A_lt_B<span class="token punctuation">,</span>A_eq_B<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> <span class="token punctuation">[</span>word__size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>O<span class="token punctuation">]</span> A<span class="token punctuation">,</span> B
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">assign</span> A_gt_B <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token operator">></span> B<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">assign</span> A_lt_B <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token operator">&lt;</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">assign</span> A_eq_B <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token operator">==</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>关键词<code>assign</code> 定义了连续赋值，将右边等式的布尔表达式与左边的变量联系起来</li>
<li>基于连续赋值的建模方式用于描述电平敏感的行为，连续赋值语句之间，基本门之间以及描述中的所有行为模块之间都是并行执行的</li>
</ul>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Comp_2_RTL <span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token keyword">reg</span> A_lt_B<span class="token punctuation">,</span>A_gt_B<span class="token punctuation">,</span>A_eq_B<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> A1<span class="token punctuation">,</span> A0<span class="token punctuation">,</span> B1<span class="token punctuation">,</span> B0
<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token important">always @</span> <span class="token punctuation">(</span>A0<span class="token punctuation">,</span> A1<span class="token punctuation">,</span> B0<span class="token punctuation">,</span> B1<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
        A_lt_B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&#123;</span>A1<span class="token punctuation">,</span> A0<span class="token operator">&#125;</span> <span class="token operator">&lt;</span> <span class="token operator">&#123;</span>B1<span class="token punctuation">,</span> B0<span class="token operator">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        A_gt_B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&#123;</span>A1<span class="token punctuation">,</span> A0<span class="token operator">&#125;</span> <span class="token operator">></span> <span class="token operator">&#123;</span>B1<span class="token punctuation">,</span> B0<span class="token operator">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        A_eq_B <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&#123;</span>A1<span class="token punctuation">,</span> A0<span class="token operator">&#125;</span> <span class="token operator">==</span> <span class="token operator">&#123;</span>B1<span class="token punctuation">,</span> B0<span class="token operator">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">end</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>无论数据通道的哪一位在任何时间发生变化，电平敏感的周期性行为都将不断的进行，不断更新它的输出</li>
<li>周期性行为的语句<code>顺序执行</code>，无限循环</li>
</ul>
<h6 id="移位寄存器的综合-阻塞与非阻塞赋值的区别-："><a href="#移位寄存器的综合-阻塞与非阻塞赋值的区别-：" class="headerlink" title="移位寄存器的综合 (阻塞与非阻塞赋值的区别)："></a>移位寄存器的综合 (阻塞与非阻塞赋值的区别)：</h6><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> shiftreg_PA <span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token keyword">reg</span> A<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> E<span class="token punctuation">,</span> clk<span class="token punctuation">,</span> rst
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">reg</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">,</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rst <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> 
            A<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> B<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> C<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> D<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token keyword">end</span> <span class="token keyword">else</span> <span class="token keyword">begin</span> 
            A<span class="token operator">=</span>B<span class="token punctuation">;</span> B<span class="token operator">=</span> C<span class="token punctuation">;</span> C<span class="token operator">=</span> D<span class="token punctuation">;</span> D<span class="token operator">=</span> E<span class="token punctuation">;</span> 
        <span class="token keyword">end</span>
    <span class="token keyword">end</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>阻塞赋值<code>=</code> ，进行过程赋值的语句必须在行为中的下一条语句执行之前完成执行过程（把结果写入寄存器中）。紧随其后的过程赋值语句被阻塞执行，直到正在执行的过程赋值语句完成执行任务时为止</li>
</ul>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> shiftreg_nb_V05 <span class="token punctuation">(</span>
	<span class="token keyword">output</span> <span class="token keyword">reg</span> A<span class="token punctuation">,</span>
    <span class="token keyword">input</span> E<span class="token punctuation">,</span> clk<span class="token punctuation">,</span> rst
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">reg</span> B<span class="token punctuation">,</span>C<span class="token punctuation">,</span> D<span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">,</span> <span class="token keyword">posedge</span> rst<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
        <span class="token function">if</span><span class="token punctuation">(</span>rst<span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span> A<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span> B<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span>C<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">;</span> D<span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">end</span> 
    	<span class="token keyword">else</span> <span class="token keyword">begin</span> 
            A <span class="token operator">&lt;=</span> B<span class="token punctuation">;</span> <span class="token comment">// D &lt;= E; </span>
            B <span class="token operator">&lt;=</span> C<span class="token punctuation">;</span> <span class="token comment">// C &lt;= D; </span>
            C <span class="token operator">&lt;=</span> D<span class="token punctuation">;</span> <span class="token comment">// B &lt;= C; </span>
            D <span class="token operator">&lt;=</span> E<span class="token punctuation">;</span> <span class="token comment">// A &lt;= B; </span>
        <span class="token keyword">end</span>
    <span class="token keyword">end</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>非阻塞赋值<code>&lt;=</code> , 非阻塞赋值语句可以并发的执行，语句在列表中的排列顺序对最终的结果没有影响，一般仿真器在给左边目标赋值之前要计算每一个右表达式的值</li>
<li>非阻塞赋值表达式的左变量必须为<code>reg</code>类型</li>
<li>边沿敏感（同步）操作尽量用非阻塞赋值来完成，组合逻辑尽量用阻塞赋值来描述</li>
</ul>
<h6 id="计数器的综合："><a href="#计数器的综合：" class="headerlink" title="计数器的综合："></a>计数器的综合：</h6><h6 id="移位寄存器的综合："><a href="#移位寄存器的综合：" class="headerlink" title="移位寄存器的综合："></a>移位寄存器的综合：</h6><h6 id="寄存器的综合："><a href="#寄存器的综合：" class="headerlink" title="寄存器的综合："></a>寄存器的综合：</h6><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> Register_File #<span class="token punctuation">(</span><span class="token keyword">parameter</span> word_size <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> addr_size <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token punctuation">[</span>word_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> Data_Out_1<span class="token punctuation">,</span> Data_Out_2<span class="token punctuation">,</span> 
	<span class="token keyword">input</span> <span class="token punctuation">[</span>word_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Data_in<span class="token punctuation">,</span> 
	<span class="token keyword">input</span> <span class="token punctuation">[</span>addr_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Read_Addr_1<span class="token punctuation">,</span> Read_Addr_2<span class="token punctuation">,</span> Write_Addr<span class="token punctuation">,</span> 
	<span class="token keyword">input</span> Write_Enable<span class="token punctuation">,</span> Clock
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">reg</span> <span class="token punctuation">[</span>word_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> Reg_File <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 32bit x32 word memory declaration </span>
	<span class="token keyword">assign</span> Data_Out_1 <span class="token operator">=</span> Reg_File<span class="token punctuation">[</span>Read_Addr_1<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">assign</span> Data_Out_2 <span class="token operator">=</span> Reg_File<span class="token punctuation">[</span>Read_Addr_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> Clock<span class="token punctuation">)</span> <span class="token keyword">begin</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Write_Enable <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> Reg_File<span class="token punctuation">[</span>Write_Addr<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> Data_in<span class="token punctuation">;</span> 
    <span class="token keyword">end</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="组合逻辑的综合："><a href="#组合逻辑的综合：" class="headerlink" title="组合逻辑的综合："></a>组合逻辑的综合：</h6><ul>
<li>结构化的原语网表</li>
<li>一系列连续赋值语句</li>
<li>电平敏感的周期性行为 （内部无反馈并且没有锁存器）</li>
</ul>
<h6 id="for的综合："><a href="#for的综合：" class="headerlink" title="for的综合："></a><code>for</code>的综合：</h6><ul>
<li>Provide a shorter way to express a series of statements</li>
<li>Loop index variables must be integer type</li>
<li>Step, start &amp; end value must be constant</li>
<li>In synthesis, for loops loops are “unrolled” , and then synthesized</li>
</ul>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always@</span><span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span>
	<span class="token keyword">begin</span>
		<span class="token function">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">)</span>
			c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Unrolled版本</p>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always@</span><span class="token punctuation">(</span> a <span class="token keyword">or</span> b <span class="token punctuation">)</span>
    <span class="token keyword">begin</span>
        c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h6 id="Case和if的综合："><a href="#Case和if的综合：" class="headerlink" title="Case和if的综合："></a><code>Case</code>和<code>if</code>的综合：</h6><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">// 优先级选择器</span>
<span class="token keyword">module</span> mux_4pri <span class="token punctuation">(</span>
    <span class="token keyword">output</span> <span class="token keyword">reg</span> y<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> sel_a<span class="token punctuation">,</span> sel_b<span class="token punctuation">,</span> sel_c
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span>sel_a<span class="token punctuation">,</span> sel_b<span class="token punctuation">,</span> sel_c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span>
<span class="token comment">//  always @ (") Optional wildcard token for complete sensitivity list </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sel_a<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> y <span class="token operator">=</span> a<span class="token punctuation">;</span> 
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sel_b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span> 
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sel_c <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> y <span class="token operator">=</span> c<span class="token punctuation">;</span> 
                <span class="token keyword">else</span> y <span class="token operator">=</span> d<span class="token punctuation">;</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>case</code>和<code>if</code>语句一般被综合成组合电路</li>
<li><code>case</code>语句通常隐含的对首先解码的选项赋予较高优先权，而<code>if</code>语句则隐含指定第一个分支具有更高优先权。综合工具会先判断<code>case</code>中的分支选择是否互斥，如果互斥，综合工具认为它们具有相同的优先级，综合成为一个多路选择器，如何不互斥则综合为优先级结构</li>
</ul>
<pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> alu_with_z1 <span class="token punctuation">(</span>
    <span class="token keyword">output</span> alu_out<span class="token punctuation">,</span> 
    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> data_a<span class="token punctuation">,</span> data_b<span class="token punctuation">,</span> <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> opcode<span class="token punctuation">,</span> <span class="token keyword">input</span> enable
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">]</span> alu_reg<span class="token punctuation">;</span> 
    <span class="token keyword">assign</span> alu_out <span class="token operator">=</span> <span class="token punctuation">(</span>enable <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> alu_reg <span class="token punctuation">:</span> <span class="token number">4'bz</span><span class="token punctuation">;</span> 
    <span class="token important">always @</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> data_a<span class="token punctuation">,</span> data_b<span class="token punctuation">)</span>
        <span class="token keyword">case</span> <span class="token punctuation">(</span>opcode<span class="token punctuation">)</span>
            <span class="token number">3'b001</span><span class="token punctuation">:</span> alu_reg <span class="token operator">=</span> data_a <span class="token operator">|</span>data_b<span class="token punctuation">;</span>
            <span class="token number">3'b010</span><span class="token punctuation">:</span> alu_reg <span class="token operator">=</span> data_a <span class="token operator">^</span> data_b<span class="token punctuation">;</span>
            <span class="token number">3'b110</span><span class="token punctuation">:</span> alu_reg <span class="token operator">=</span> <span class="token operator">~</span>data_b<span class="token punctuation">;</span> 
            <span class="token keyword">default</span><span class="token punctuation">:</span> alu_reg <span class="token operator">=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span> <span class="token comment">// alu_with_z2 has default: alu_reg = 4'bx; </span>
        <span class="token keyword">endcase</span> 
<span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>缺少默认赋值语句会使<code>寄存器变量</code>输出锁存，综合工具会自动生成锁存器 （在条件未定义时保持输出原值）</li>
<li>当对默认赋值语句没有限制时（e.g., 4’bx）综合工具将视为无关紧要条件，减少电路所需逻辑</li>
<li>如果一个条件操作符将<code>z</code>值放在电平敏感行为中连续赋值的右表达式中，那么该语句将会综合成通过组合逻辑驱动的一个三态器件中</li>
</ul>
]]></content>
      <categories>
        <category>Verilog</category>
      </categories>
      <tags>
        <tag>verilog</tag>
      </tags>
  </entry>
</search>
